//==========================================================================
//文件名称：uart.h
//功能概要：K64 UART底层驱动程序头文件
//==========================================================================

#ifndef _UART_H
#define _UART_H

//包含公共头文件
#include "common.h"

//宏定义串口号
#define U_UART0 (0)
#define U_UART1 (1)
#define U_UART2 (2)
#define U_UART3 (3)
#define U_UART4 (4)
#define U_UART5 (5)

//根据串口实际硬件引脚，确定以下宏常量值。

//U_UART0：1=PTA2~1脚，2=PTA14~15脚，3=PTB17~16脚，4=PTD7~6脚（TX、RX）
//#define U_UART0_GROUP    (4)
//
////U_UART1: 1=PTC4~3脚，2=PTE0~1脚（TX、RX）
#define U_UART1_GROUP    (2)
//
////U_UART2:1=PTD3~2脚（TX、RX）
//#define U_UART2_GROUP    (1)
//
//U_UART3：1=PTB11~10脚，2=PTC17~16脚，3=PTE4~5脚（TX、RX）
//#define U_UART3_GROUP    (1)

//U_UART4：1=PTC15~14脚，2=PTE24~25脚（TX、RX）
//#define U_UART4_GROUP    (1)

//U_UART5：1=PTD9~8脚，2=PTE8~9脚
//#define U_UART5_GROUP    (2)

//=================接口函数声明============================================
//========================================================================
//函数名称：uart_init
//功能概要：初始化uart模块
//参数说明：uartNo:串口号：U_UART0、U_UART1、U_UART2、U_UART3、U_UART4、U_UART5
//          sel_clk:选择串口时钟源:
//                内核时钟    (96000Khz)
//				   总线时钟    (48000khz)
//          baud:波特率：300、600、1200、2400、4800、9600、19200、115200...
//函数返回：无
//=========================================================================
uint8_t uart_init(uint8_t uartNo, uint32_t baud);

//=========================================================================
//函数名称：uart_re1
//参数说明：uartNo: 串口号
//          fp:接收成功标志的指针:*p=0，成功接收；*p=1，接收失败
//函数返回：接收返回字节
//功能概要：串行接收1个字节
//=========================================================================
uint8_t uart_re1(uint8_t uartNo, uint8_t *fp);

//=========================================================================
//函数名称：uart_send1
//参数说明：uartNo: 串口号
//          ch:要发送的字节
//函数返回：函数执行状态：0=正常；非0=异常。
//功能概要：串行发送1个字节
//=========================================================================
uint8_t uart_send1(uint8_t uartNo, uint8_t ch);

//=========================================================================
//函数名称：uart_reN                                                         
//功能概要：串行 接收n个字节                                                 
//参数说明：uartNo: 串口号
//          buff: 接收缓冲区                                                 
//		   len:接收长度                                                     
//函数返回： 1:成功;0:失败                                                    
//=========================================================================
uint8_t uart_reN(uint8_t uartNo, uint16_t len, uint8_t* buff);

//=========================================================================
//函数名称：uart_sendN
//参数说明：uartNo: 串口号
//          buff: 发送缓冲区
//          len:发送长度
//函数返回：函数执行状态：0=正常；1=异常。
//功能概要：串行接收n个字节   
//=========================================================================
uint8_t uart_sendN(uint8_t uartNo, uint16_t len, uint8_t* buff);

//=========================================================================
//函数名称：uart_send_string
//参数说明：uartNo:UART模块号
//          buff:要发送的字符串的首地址
//函数返回：函数执行状态：0=正常；非0=异常。
//功能概要：从指定UART端口发送一个以'\0'结束的字符串
//=========================================================================
uint8_t uart_send_string(uint8_t uartNo, void *buff);

//=========================================================================
//函数名称：uart_enable_re_int
//参数说明：uartNo: 串口号
//函数返回：无
//功能概要：开串口接收中断
//=========================================================================
void uart_enable_re_int(uint8_t uartNo);

//=========================================================================
//函数名称：uart_disable_re_int
//参数说明：uartNo: 串口号
//函数返回：无
//功能概要：关串口接收中断
//=========================================================================
void uart_disable_re_int(uint8_t uartNo);

#endif

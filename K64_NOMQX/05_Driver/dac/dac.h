//==========================================================================
//文件名称：dac.h
//功能概要：K64 DAC底层驱动程序头文件
//==========================================================================

#ifndef _DAC_H
#define _DAC_H

//包含公共头文件
#include "common.h"

//定义DAC模块号
#define DAC_MOD0	(0)		//引脚号:27
#define DAC_MOD1	(1)		//K64 100引脚LQFP封装无该模块

//定义DAC模块参考电压源
#define DAC_REF_VTG_VREFOUT		(0)		//VREF_OUT
#define DAC_REF_VTG_VDDA		(1)		//VDDA

//定义DAC模块缓冲区工作模式
#define DAC_BUFFER_MODE_NORMAL			(0)		//普通模式
#define DAC_BUFFER_MODE_SWING			(1)		//摇摆模式
#define DAC_BUFFER_MODE_ONE_TIME_SCAN	(2)		//单次扫描模式

//定义DAC模块缓冲区水印选择
#define DAC_WATERMARK_WORD_1	(0)		//水印距离缓冲区指针位置上限1个字
#define DAC_WATERMARK_WORD_2	(1)		//水印距离缓冲区指针位置上限2个字
#define DAC_WATERMARK_WORD_3	(2)		//水印距离缓冲区指针位置上限3个字
#define DAC_WATERMARK_WORD_4	(3)		//水印距离缓冲区指针位置上限4个字

//定义DAC模块触发转换方式
#define DAC_TRIGGER_HARDWARE	(0)		//硬件触发
#define DAC_TRIGGER_SOFTWARE	(1)		//软件触发

//==========================================================================
//函数名称: dac_init
//函数返回: 无
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//         ref_vtg:参考电压源:
//                 DAC_REF_VTG_VREFOUT:VREF_OUT;
//                 DAC_REF_VTG_VDDA:   VDDA;
//功能概要: 初始化DAC模块，默认关闭缓冲区，默认输出值为0，即(参考电压值/4096)
//==========================================================================
void dac_init(uint8 mod, uint8 ref_vtg);

//==========================================================================
//函数名称: dac_set_buffer_val
//函数返回: 无
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//         index:缓冲区位置，取值范围为[0,15]
//         val:缓冲区值，取值范围为[0,4095]
//功能概要: 设置指定缓冲区位置的值
//备注: 输出电压值 = 参考电压值 * (val + 1) / 4096，
//     val为缓冲区当前指针位置的val;
//     未使能缓冲区时，仅会输出缓冲区位置为0的值;
//     无论是否使能缓冲区，各缓冲区位置的值均可设置
//==========================================================================
void dac_set_buffer_val(uint8 mod, uint8 index, uint16 val);

//==========================================================================
//函数名称: dac_get_buffer_val
//函数返回: 缓冲区值，取值范围为[0,4095]
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//         index:缓冲区位置，取值范围为[0,15]
//功能概要: 获取指定缓冲区位置的值
//==========================================================================
uint16 dac_get_buffer_val(uint8 mod, uint8 index);

//==========================================================================
//函数名称: dac_enable_buffer
//函数返回: 无
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//         buffer_mode:缓冲区工作模式:
//                     DAC_BUFFER_MODE_NORMAL:       普通模式;
//                     DAC_BUFFER_MODE_SWING:        摇摆模式;
//                     DAC_BUFFER_MODE_ONE_TIME_SCAN:单次扫描模式;
//         max_index:缓冲区指针位置上限，取值范围为[0,15]
//         watermark:缓冲区水印选择:
//                   DAC_WATERMARK_WORD_x，水印距离缓冲区指针位置上限x个字，
//                   x可取值为[1,4]
//         trigger:触发转换方式:
//                 DAC_TRIGGER_HARDWARE:硬件触发;
//                 DAC_TRIGGER_SOFTWARE:软件触发;
//功能概要: 使能DAC缓冲区，默认关闭各缓冲区中断
//备注: 使能缓冲区后，当前指针位置被重置为0;
//
//     工作模式为普通模式时，缓冲区当前指针位置在触发信号下每次加1，直到到达上限，
//     下一个触发信号到来时，指针重置为0;
//
//     工作模式为摇摆模式时，指针位置到达上限后，不直接重置为0，而是开始递减，
//     一步步退回至0，再重新递增;
//
//     工作模式为单次扫描模式时，指针位置到达上限后，收到触发信号时，
//     指针位置将不再变化;
//
//     若指针位置上限为2，共5个触发信号，指针位置变化顺序为:
//     普通模式:    0 - 1 - 2 - 0 - 1 - 2
//     摇摆模式:    0 - 1 - 2 - 1 - 0 - 1
//     单次扫描模式: 0 - 1 - 2 - 2 - 2 - 2
//
//     若水印选择为DAC_WATERMARK_WORD_2，缓冲区指针位置上限为15，则水印位置为13，
//     但若指针位置上限小于水印距离，将无法到达水印位置;
//
//     若选择硬件触发，则需要设置PDB模块
//==========================================================================
void dac_enable_buffer(uint8 mod, uint8 buffer_mode, uint8 max_index,
		uint8 watermark, uint8 trigger);

//==========================================================================
//函数名称: dac_disable_buffer
//函数返回: 无
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//功能概要: 关闭DAC缓冲区
//备注: 关闭缓冲区后，当前指针位置被重置为0;各缓冲区中断不会被关闭
//==========================================================================
void dac_disable_buffer(uint8 mod);

//==========================================================================
//函数名称: dac_software_trigger
//函数返回: 无
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//功能概要: 进行一次软件触发
//备注: 未使能缓冲区时，缓冲区当前指针位置不会变化;
//     使能缓冲区时，缓冲区当前指针位置将按照工作模式进行相应的变化，
//     将输出变化后缓冲区位置的值
//==========================================================================
void dac_software_trigger(uint8 mod);

//==========================================================================
//函数名称: dac_set_buffer_index
//函数返回: 无
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//         index:缓冲区当前指针位置，取值范围为[0,15]
//功能概要: 设置缓冲区当前指针位置
//备注: 未使能缓冲区时，设置当前指针位置无效;
//     使能缓冲区时，当前指针位置可以超过缓冲区上限;
//     将输出变化后缓冲区位置的值
//==========================================================================
void dac_set_buffer_index(uint8 mod, uint8 index);

//==========================================================================
//函数名称: dac_get_buffer_index
//函数返回: 缓冲区当前指针位置，取值范围为[0,15]
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//功能概要: 获取缓冲区当前指针位置
//==========================================================================
uint8 dac_get_buffer_index(uint8 mod);

//==========================================================================
//函数名称: dac_set_buffer_int
//函数返回: 无
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//         index_bottom_int:是否使能指针位置底部中断:
//                          true: 使能中断;
//                          false:关闭中断;
//         index_top_int:是否使能指针位置顶部中断:
//                       true: 使能中断;
//                       false:关闭中断;
//         watermark_int:是否使能水印中断:
//                       true: 使能中断;
//                       false:关闭中断;
//功能概要: 使能或关闭各缓冲区中断
//备注: 缓冲区当前指针位置为指针位置上限时，将触发指针位置底部中断;
//     为0时，将触发指针位置顶部中断;为水印位置时，将触发水印中断;
//
//     仅当使能中断后，且指针位置发生变化，才会发生相应中断;
//
//     若该中断未被使能，指针位置到达中断位置，中断标志会被置位，但不会发生中断
//==========================================================================
void dac_set_buffer_int(uint8 mod, bool index_bottom_int, bool index_top_int,
		bool watermark_int);

//==========================================================================
//函数名称: dac_get_index_bottom_int
//函数返回: true:产生中断; false:未产生中断
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//功能概要: 获取指针位置底部中断的中断标志
//==========================================================================
bool dac_get_index_bottom_int(uint8 mod);

//==========================================================================
//函数名称: dac_clear_index_bottom_int
//函数返回: 无
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//功能概要: 清除指针位置底部中断的中断标志
//==========================================================================
void dac_clear_index_bottom_int(uint8 mod);

//==========================================================================
//函数名称: dac_get_index_top_int
//函数返回: true:产生中断; false:未产生中断
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//功能概要: 获取指针位置顶部中断的中断标志
//==========================================================================
bool dac_get_index_top_int(uint8 mod);

//==========================================================================
//函数名称: dac_clear_index_top_int
//函数返回: 无
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//功能概要: 清除指针位置顶部中断的中断标志
//==========================================================================
void dac_clear_index_top_int(uint8 mod);

//==========================================================================
//函数名称: dac_get_watermark_int
//函数返回: true:产生中断; false:未产生中断
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//功能概要: 获取水印中断的中断标志
//==========================================================================
bool dac_get_watermark_int(uint8 mod);

//==========================================================================
//函数名称: dac_clear_watermark_int
//函数返回: 无
//参数说明: mod:DAC模块号:
//             DAC_MODx，x为模块号;
//功能概要: 清除水印中断的中断标志
//==========================================================================
void dac_clear_watermark_int(uint8 mod);

#endif

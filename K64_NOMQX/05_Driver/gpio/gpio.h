//==========================================================================
//文件名称：gpio.h
//功能概要：K64 GPIO底层驱动程序头文件
//==========================================================================

#ifndef _GPIO_H
#define _GPIO_H

//包含公共头文件
#include "common.h"

//定义GPIO模块电平状态
#define GPIO_LEVEL_LOW		(0)		//低电平
#define GPIO_LEVEL_HIGH		(1)		//高电平
#define GPIO_LEVEL_UNKNOWN	(2)		//未知电平，仅在配置为输入时有效

//定义GPIO模块引脚方向
#define GPIO_DIR_INPUT		(0)		//输入
#define GPIO_DIR_OUTPUT		(1)		//输出

//定义GPIO模块中断类型
#define GPIO_INT_LOW_LEVEL		(8)		//低电平触发中断
#define GPIO_INT_HIGH_LEVEL		(12)	//高电平触发中断
#define GPIO_INT_RISING_EDGE	(9)		//上升沿触发中断
#define GPIO_INT_FALLING_EDGE	(10)	//下降沿触发中断
#define GPIO_INT_DOUBLE_EDGE	(11)	//双边沿触发中断

//定义GPIO模块DMA类型
#define GPIO_DMA_RISING_EDGE	(1)		//上升沿触发DMA请求
#define GPIO_DMA_FALLING_EDGE	(2)		//下降沿触发DMA请求
#define GPIO_DMA_DOUBLE_EDGE	(3)		//双边沿触发DMA请求

//==========================================================================
//函数名称: gpio_init
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//         dir:引脚方向:
//             GPIO_DIR_INPUT: 配置为输入;
//             GPIO_DIR_OUTPUT:配置为输出;
//         level:输出时为引脚电平状态，输入时为引脚上下拉状态:
//               GPIO_LEVEL_LOW:    低电平;
//               GPIO_LEVEL_HIGH:   高电平;
//               GPIO_LEVEL_UNKNOWN:未知电平(即关闭上下拉电阻)，仅在配置为输入时有效;
//功能概要: 初始化指定端口引脚为GPIO功能
//==========================================================================
void gpio_init(uint8 port_pin, uint8 dir, uint8 level);

//==========================================================================
//函数名称: gpio_set_level
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//         level:引脚电平状态:
//               GPIO_LEVEL_LOW: 低电平;
//               GPIO_LEVEL_HIGH:高电平;
//功能概要: 当引脚配置为输出时，设定引脚电平状态为指定电平
//==========================================================================
void gpio_set_level(uint8 port_pin, uint8 level);

//==========================================================================
//函数名称: gpio_toggle_level
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//功能概要: 当引脚配置为输出时，反转其输出状态
//==========================================================================
void gpio_toggle_level(uint8 port_pin);

//==========================================================================
//函数名称: gpio_set_drive_strength
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//         enable:是否使能引脚的高驱动能力:
//                true: 高驱动能力(18mA);
//                false:正常驱动能力(5mA);
//功能概要: 当引脚配置为输出时，设定是否使能引脚的高驱动能力
//==========================================================================
void gpio_set_drive_strength(uint8 port_pin, bool enable);

//==========================================================================
//函数名称: gpio_set_open_drain
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//         enable:是否使能引脚的开漏输出:
//                true: 使能开漏输出;
//                false:关闭开漏输出;
//功能概要: 当引脚配置为输出时，设定是否使能引脚的开漏输出
//==========================================================================
void gpio_set_open_drain(uint8 port_pin, bool enable);

//==========================================================================
//函数名称: gpio_set_slew_rate
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//         enable:是否使能引脚的低电压转换速率:
//                true: 低电压转换速率;
//                false:高电压转换速率;
//功能概要: 当引脚配置为输出时，设定是否使能引脚的低电压转换速率
//==========================================================================
void gpio_set_slew_rate(uint8 port_pin, bool enable);

//==========================================================================
//函数名称: gpio_get_level
//函数返回: GPIO_LEVEL_LOW(0):低电平; GPIO_LEVEL_HIGH(1):高电平
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//功能概要: 当引脚配置为输入时，获取其电平状态
//==========================================================================
uint8 gpio_get_level(uint8 port_pin);

//==========================================================================
//函数名称: gpio_set_pull
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//         level:引脚上下拉状态:
//               GPIO_LEVEL_LOW:    低电平;
//               GPIO_LEVEL_HIGH:   高电平;
//               GPIO_LEVEL_UNKNOWN:未知电平，即关闭上下拉电阻;
//功能概要: 当引脚配置为输入时，设定其上下拉状态
//==========================================================================
void gpio_set_pull(uint8 port_pin, uint8 level);

//==========================================================================
//函数名称: gpio_set_passive_filter
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//         enable:是否使能引脚的无源滤波:
//                true: 使能无源滤波;
//                false:关闭无源滤波;
//功能概要: 当引脚配置为输入时，设定是否使能引脚的无源滤波
//==========================================================================
void gpio_set_passive_filter(uint8 port_pin, bool enable);

//==========================================================================
//函数名称: gpio_enable_int
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//         int_type:引脚中断类型：
//                  GPIO_INT_LOW_LEVEL:   低电平触发中断;
//                  GPIO_INT_HIGH_LEVEL:  高电平触发中断;
//                  GPIO_INT_RISING_EDGE: 上升沿触发中断;
//                  GPIO_INT_FALLING_EDGE:下降沿触发中断;
//                  GPIO_INT_DOUBLE_EDGE: 双边沿触发中断;
//功能概要: 当引脚配置为输入时，根据中断类型开启该引脚中断
//备注: 引脚不可以同时触发中断和DMA请求
//==========================================================================
void gpio_enable_int(uint8 port_pin, uint8 int_type);

//==========================================================================
//函数名称: gpio_disable_int
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//功能概要: 当引脚配置为输入时，关闭该引脚中断
//==========================================================================
void gpio_disable_int(uint8 port_pin);

//==========================================================================
//函数名称: gpio_get_int
//函数返回: true:产生中断; false:未产生中断
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//功能概要: 当引脚配置为输入时，获取其中断标志
//==========================================================================
bool gpio_get_int(uint8 port_pin);

//==========================================================================
//函数名称: gpio_clear_int
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//功能概要: 当引脚配置为输入时，清除其中断标志
//==========================================================================
void gpio_clear_int(uint8 port_pin);

//==========================================================================
//函数名称: gpio_enable_dma
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//         dma_type:引脚DMA类型：
//                  GPIO_DMA_RISING_EDGE: 上升沿触发DMA请求;
//                  GPIO_DMA_FALLING_EDGE:下降沿触发DMA请求;
//                  GPIO_DMA_DOUBLE_EDGE: 双边沿触发DMA请求;
//功能概要: 当引脚配置为输入时，使能该引脚触发DMA请求
//备注: 引脚不可以同时触发中断和DMA请求
//==========================================================================
void gpio_enable_dma(uint8 port_pin, uint8 dma_type);

//==========================================================================
//函数名称: gpio_disable_dma
//函数返回: 无
//参数说明: port_pin:(端口号)|(引脚号):
//                  COM_PORTx|p，x为端口号，p为引脚号，具体见common.h中宏定义;
//功能概要: 当引脚配置为输入时，关闭该引脚触发DMA请求
//==========================================================================
void gpio_disable_dma(uint8 port_pin);

#endif
